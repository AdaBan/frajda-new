{% set assetHash = global.random() %}

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <meta http-equiv="X-UA-Compatible" content="ie=edge"/>
    <link rel="icon" type="image/png" href="{{ '/assets/favicon.png' | url }}"/>
    {% include "partials/meta-info.njk" %}

    <link rel="stylesheet" href="{{ '/css/global.css' | url }}"/>

    {# Add facility for pages to declare an array of stylesheet paths #}
    {% if pageStylesheets %}
      {% for item in pageStylesheets %}
        <link rel="stylesheet" media="print" href="{{ item }}?{{ assetHash }}" onload="this.media='all'"/>
      {% endfor %}
    {% endif %}
  </head>
  <body>
    {% svgsprite %}

    {% include "partials/site-head.njk" %}

    <main tabindex="-1" id="main-content">
      {% block content %}{% endblock %}
    </main>

    <!-- TODO: move js do _data files -->

    {# lazy loading script #}
    <script type="module" async>
      import Lazyload from 'https://cdn.skypack.dev/vanilla-lazyload';
      const lazyload = new Lazyload();
    </script>

    {# mobile navigation script #}
    <script async>
      const $buttonClose = document.querySelector('[data-nav-close]');
      const $buttonOpen = document.querySelector('[data-nav-open]');
      const $navigation = document.querySelector('[data-nav]');
      const $navigationLinksList = document.querySelector('[data-nav-links]');
      const $brand = document.querySelector('[data-brand]');

      const closeNavigation = () => {
        if (!$navigation) {
          return;
        }

        $buttonOpen
          .classList
          .remove('-is-hidden');
        $buttonClose
          .classList
          .add('-is-hidden');
        $buttonClose
          .classList
          .remove('-is-reversed'); // color animation

        $navigation
          .classList
          .remove('-is-active');
        document.body.style.overflow = 'auto';
      }
      const openNavigation = () => {
        if (!$navigation) {
          return;
        }

        $buttonClose
          .classList
          .remove('-is-hidden');
        $buttonOpen
          .classList
          .add('-is-hidden');
        $navigation
          .classList
          .add('-is-active');
        document.body.style.overflow = 'hidden';

        setTimeout(() => {
          $buttonClose
            .classList
            .add('-is-reversed'); // color animation
        }, 400);
      }
      $buttonOpen.addEventListener('click', openNavigation);
      $buttonClose.addEventListener('click', closeNavigation);
      $navigationLinksList.addEventListener('click', closeNavigation);
    </script>

    {# accordion script #}
    <script async>
      const $accordionTriggers = document.querySelectorAll('[data-accordion-trigger]');
      const $accordionPanels = document.querySelectorAll('[data-accordion-panel]');

      onTriggerClick = (ev) => {
        const isDesktop = window
          .matchMedia('(min-width: 1024px)')
          .matches;
        const controlAttr = ev
          .target
          .getAttribute('aria-controls');
        const $accordionPanel = document.querySelector(`#${controlAttr}`);

        if (isDesktop) {
          $accordionTriggers.forEach(t => t.classList.remove('-is-active'));
          $accordionPanels.forEach(t => t.classList.remove('-is-active'));
          ev
            .target
            .classList
            .add('-is-active');
          $accordionPanel
            .classList
            .add('-is-active');
        } else {
          ev
            .target
            .classList
            .toggle('-is-active');
          $accordionPanel
            .classList
            .toggle('-is-active');

          $accordionPanel
            .parentNode
            .scrollIntoView({behavior: 'smooth', block: 'start', inline: 'nearest'});
        }
      }

      for (let trigger of $accordionTriggers) {
        trigger.addEventListener('click', onTriggerClick)
      }
    </script>

    {# date script #}
    <script defer>
      const $dateContainer = document.querySelector('[data-current-time]');

      const displayTime = () => {
        const time = new Date();
        const hours = time.getHours();
        const formattedHours = hours % 12 || 12; // AM / PM
        const minutes = String(time.getMinutes()).padStart(2, '0');
        const ampm = hours >= 12
          ? 'pm'
          : 'am';
        const weekday = time.toLocaleString('en-US', {weekday: 'long'});

        $dateContainer.innerHTML = formattedHours + '<span class="footer__seconds">:</span>' + minutes + ' ' + ampm + ', ' + weekday;
      }

      const interval = setInterval(() => {
        displayTime();
      }, 10000);

      displayTime();
    </script>

    {# scroll observer #}
    <script async>
      document.body.classList.add('js-enabled');
      
      function scrollTrigger(selector, options = {}) {
        let els = document.querySelectorAll(selector)
        els = Array.from(els)
        els.forEach(el => {

          addObserver(el, options)
        })
      }

      function addObserver(el, options) {
        let observer = new IntersectionObserver((entries, observer) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              entry
                .target
                .classList
                .add('active')
              observer.unobserve(entry.target)
            }
          })
        }, options)
        observer.observe(el)
      }

      scrollTrigger('.fade-in')
    </script>
  </body>
</html>
